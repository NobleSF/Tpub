# Generated by Django 3.0.6 on 2020-06-03 11:23

from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0002_auto_20200602_1634'),
        ('shop', '0008_auto_20200603_1044'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='historicalitem',
            name='addon_price',
        ),
        migrations.RemoveField(
            model_name='historicalitem',
            name='addon_price_currency',
        ),
        migrations.RemoveField(
            model_name='item',
            name='addon_price',
        ),
        migrations.RemoveField(
            model_name='item',
            name='addon_price_currency',
        ),
        migrations.AddField(
            model_name='historicalitem',
            name='options_required_count',
            field=models.SmallIntegerField(blank=True, help_text='number of options that must be selected (eg. 2 on half/half pizza)', null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='options_required_count',
            field=models.SmallIntegerField(blank=True, help_text='number of options that must be selected (eg. 2 on half/half pizza)', null=True),
        ),
        migrations.AlterField(
            model_name='historicalitem',
            name='is_option',
            field=models.BooleanField(default=False, help_text='can be a required option for another item (eg. meat choice in a wrap)'),
        ),
        migrations.AlterField(
            model_name='item',
            name='is_option',
            field=models.BooleanField(default=False, help_text='can be a required option for another item (eg. meat choice in a wrap)'),
        ),
        migrations.CreateModel(
            name='AddonType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valid_at', models.DateTimeField(blank=True, null=True)),
                ('expired_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('unpublished_at', models.DateTimeField(blank=True, null=True)),
                ('addon_max_count', models.SmallIntegerField(blank=True, help_text='maxiumum number of addons allowed (eg. 10 salad toppings)', null=True)),
                ('addon_free_count', models.SmallIntegerField(blank=True, help_text='number of free addons allowed (eg. 1 for salad dressing)', null=True)),
                ('standard_price_currency', djmoney.models.fields.CurrencyField(choices=[('THB', 'Baht')], default='THB', editable=False, max_length=3)),
                ('standard_price', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='THB', help_text='set price for all extra addons (eg. $2 for extra cheese)', max_digits=8, null=True)),
                ('notes', models.ManyToManyField(blank=True, to='common.Note')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Addon',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='shop.Item')),
                ('addon_price_currency', djmoney.models.fields.CurrencyField(choices=[('THB', 'Baht')], default='THB', editable=False, max_length=3)),
                ('addon_price', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default_currency='THB', help_text='price when not free', max_digits=8, null=True)),
                ('addon_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addons', to='shop.AddonType')),
            ],
            options={
                'abstract': False,
            },
            bases=('shop.item',),
        ),
        migrations.AddField(
            model_name='item',
            name='addon_types',
            field=models.ManyToManyField(blank=True, help_text='types of addons (eg. salad dressings, toppings)', to='shop.AddonType'),
        ),
    ]
